I")<p>Este é o segundo post de uma série onde abordaremos todos os cinco princípios do SOLID. Neste, falaremos sobre “Open closed principle”, abreviado por OCP, e significa literalmente “Princípio aberto-fechado”.</p>

<p>O primeiro post foi sobre “Single responsibility principle”, abreviado por SRP, e você pode <a href="http://leonardo.rifeli.tech/development/2017/03/20/principios-solid-srp-e-sopa-de-letrinhas.html">ler aqui</a>.</p>

<p>Para começar: falar de SOLID é falar de programação orientada a objetos e design (OOD). Tendo isso em mente, o princípio aberto-fechado traz uma perspectiva importante: os participantes precisam ser abertos para extensão e fechadas para modicação.</p>

<h1 id="antes-de-tudo-os-conceitos-solid-estão-atrelados">Antes de tudo, os conceitos SOLID estão atrelados?</h1>

<p>De maneira ou outra, sim! No primeiro post, discutimos sobre <a href="http://leonardo.rifeli.tech/development/2017/03/20/principios-solid-srp-e-sopa-de-letrinhas.html">SRP</a> onde os participantes devem possuir somente uma razão para mudança; adicionar uma nova feature irá violar tanto SRP como OCP. Ou seja, quanto maior o número de responsabilidade de um participante, maior a probabilidade de violar OCP.</p>

<p>Portanto, um código que segue SRP tende a estar mais próximo de seguir OCP, por consequência.</p>

<h1 id="tá-e-o-que-é-ser-aberto-para-extensão">Tá! E o que é ser aberto para extensão?</h1>

<p>Após um software estar em produção, há grande probabilidade de sofrer alterações, evoluir, ter novas features, etc. OCP defende que à partir do momento que o software está em produção, os participantes em questão não poderão sofrer modificações, diminuindo a chance de algum bug ser causado.</p>

<p>Aberto para extensão significa que não podemos modificar o participante que já está em produção e sim exterder as suas funcionalidades atuais e implementar as novas features.</p>

<p>Ou seja, o OCP nos força a desenvolver códigos extensíveis, tornando-os escaláveis e não editáveis.</p>

<p>Com isso, é importante ter a definição de herança bem clara. Você pode ler um pouco sobre no artigo <a href="https://leonardo.rifeli.tech/development/2016/08/19/heranca-ou-composicao-qual-utilizar.html">Herança ou Composição</a>.</p>

<h1 id="problemas-da-violação-do-ocp">Problemas da violação do OCP</h1>

<ul>
  <li>Quebrar outros princípios SOLID;</li>
  <li>Maior probabilidade de causar bug;</li>
  <li>Um código não escalável e provavelmente menos extensível;</li>
  <li>Entre outros.</li>
</ul>

<h1 id="exemplos">Exemplos</h1>

<p>Seguindo o mesmo padrão do primeiro post, os exemplos serão exibidos somente com as assinaturas, para refornçar a ideia que <em>Uncle Bob</em> traz, de que a implementação dos métodos é irrelevante para a análise. Somente com as assinaturas, conseguimos perceber se existe (ou não) a violação do princípio.</p>

<h4 id="exemplo-com-violação">Exemplo com violação</h4>

<p>Observe o exemplo abaixo, onde temos a classe <em><code class="highlighter-rouge">Debit</code></em> e ela precisará debitar um determinado valor de um tipo de débito.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">Leonardo\Rifeli\Article\Business</span><span class="p">;</span>

<span class="kn">use</span> <span class="nn">namespace</span><span class="err"> Leonardo\Rifeli\Article\Business\DebitType</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Debit</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">int</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">DebitType</span> <span class="nx">debitType</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
<span class="p">}</span>

<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>Com o exemplo acima, será necessário ter condições para controlar e implementar as regras de negócio dos tipos de débitos. Considerando que tenhamos os tipos: <em><code class="highlighter-rouge">Savings</code></em> e <em><code class="highlighter-rouge">CheckingAccount</code></em>, teríamos condições para estes dois tipos e caso novos tipos de détibo surgem, violaríamos OCP.</p>

<h4 id="exemplo-sem-violação">Exemplo sem violação</h4>

<p>No exemplo abaixo, a classe <em><code class="highlighter-rouge">Debit</code></em> virará uma <em><code class="highlighter-rouge">abstract class</code></em>, e os tipos de conta, serão classes derivadas de <em><code class="highlighter-rouge">Debit</code></em>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">Leonardo\Rifeli\Article\Business\Abstract</span><span class="p">;</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">Debit</span>
<span class="p">{</span>
    <span class="k">abstract</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">int</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
<span class="p">}</span>

<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>Caso novos tipos de débito surgem, basta extender <em><code class="highlighter-rouge">Debit</code></em> e executar a transação com as regras de negócio necessárias.</p>

<p>Com isso, a cada novo tipo, teremos novos códigos e não códigos alterados.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">Leonardo\Rifeli\Article\Business</span><span class="p">;</span>

<span class="kn">use</span> <span class="nn">Leonardo\Rifeli\Article\Business\Abstract\Debit</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">CheckingAccount</span> <span class="k">extends</span> <span class="nx">Debit</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">int</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
<span class="p">}</span>

<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>Para ampliar nossos exemplo, podemos criar uma classe <em><code class="highlighter-rouge">SomeDebit</code></em> tendo os métodos <em><code class="highlighter-rouge">setDebit</code></em> e <em><code class="highlighter-rouge">execute</code></em>, conforme exemplo abaixo.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">Leonardo\Rifeli\Article\Business</span><span class="p">;</span>

<span class="kn">use</span> <span class="nn">Leonardo\Rifeli\Article\Business\Abstract\Debit</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">SomeDebit</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$debit</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setDebit</span><span class="p">(</span><span class="nx">Debit</span> <span class="nv">$debit</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">debit</span> <span class="o">=</span> <span class="nv">$debit</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">int</span> <span class="nx">value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">debit</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>Conforme novos tipos forem surgindo, basta criá-lo extendendo <em><code class="highlighter-rouge">Debit</code></em>, e utilizar o <em><code class="highlighter-rouge">SameDebit</code></em> para executar. Aqui, no final, estamos aplicando o padrão de projeto <em><code class="highlighter-rouge">Strategy</code></em>.</p>

<h1 id="referências">Referências</h1>

<ul>
  <li><a href="https://www.amazon.com/dp/0135974445/">Livro - Agile Software Development, Principles, Patterns, and Practices</a>;</li>
  <li><a href="https://www.youtube.com/watch?v=LsA4QRwq58o&amp;list=PLRX4OtWY_G7N518US48x-EZxXt6h0pr3V&amp;index=2">Hangout sobre OOD - Princípio Open Closed</a>;</li>
  <li><a href="https://pt.slideshare.net/MayogaX/ood-princpio-openclosed">OOD - Open Closed Principle</a>;</li>
  <li><a href="http://www.hanselminutes.com/145/solid-principles-with-uncle-bob-robert-c-martin">SOLID Principles with Uncle Bob - Robert C. Martin</a>;</li>
  <li><a href="https://en.wikipedia.org/wiki/Design_Patterns">Design Patterns GoF</a>;</li>
  <li><a href="https://code.tutsplus.com/pt/tutorials/solid-part-2-the-openclosed-principle--net-36600">SOLID part 2 - The Open Closed Principle</a>;</li>
  <li><a href="https://en.wikipedia.org/wiki/Strategy_pattern">Strategy pattern</a>;</li>
  <li><a href="http://br.phptherightway.com/pages/Design-Patterns.html">PHP do jeito certo - Design Patterns</a>;</li>
  <li><a href="https://www.casadocodigo.com.br/products/livro-oo-solid">Casa do Código - Orientação a Objetos e SOLID para Ninjas</a>.</li>
</ul>

<h1 id="conclusão">Conclusão</h1>

<p>OCP reforça que pensar em orientação a objetos é pensar primeiro na abstração e depois na implementação em si.
Vale lembrar que softwares OO evoluem por meio de novos códigos, e não por edições.</p>

<p>Podemos continuar as discussões sobre este princípio nos comentários?</p>

<p>Compartilhe seus aprendizados.</p>
:ET