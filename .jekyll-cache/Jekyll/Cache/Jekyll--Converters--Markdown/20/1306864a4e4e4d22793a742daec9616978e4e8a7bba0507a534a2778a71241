I"¢1<p>Em algumas palestras ouvimos dizer que este assunto √© <strong>hype</strong>, mas quando necessitamos de informa√ß√µes mais concretas sobre o assunto, n√£o se encontra muito conte√∫do em portugu√™s ou at√© mesmo cases de utiliza√ß√£o e sucesso.</p>

<p>Conosco aqui na <strong>reviewr</strong> n√£o foi diferente. Uma parte da nossa arquitetura √© completamente em Serverless/FaaS e tivemos grandes desafios. Eu e o Marcelo Andrade (CTO da reviewr) palestramos no StartupSC Summit 2018 e gostar√≠amos de compartilhar com voc√™ nossa experi√™ncia.</p>

<p>O que √© Serverless?
Sempre que entramos neste assunto, utilizamos muito os argumentos e defini√ß√µes do mestre Mike Roberts:</p>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/1200/1*KaiUEw1va-CTT1KvfK5QVQ.png" />
</div>

<p>Ou seja, serverless possui duas poss√≠veis defini√ß√µes: aplica√ß√µes que dependem significativamente de servi√ßos de terceiro (Backend como servi√ßo, tamb√©m conhecido na sigla BaaS). Como tamb√©m, um cont√™iner ef√™mero para execu√ß√£o de um c√≥digo personalizado (as famosas functions).</p>

<p>N√£o tem o porque reescrevermos a roda por aqui. Caso ainda tenha ficado alguma d√∫vida, este <a href="https://medium.com/@dayvsonlima/voc%C3%AA-sabe-o-que-%C3%A9-arquitetura-serverless-1f6dd1184e5b">artigo sobre o que √© uma arquitetura serverlerss</a> do Dayvson Lima pode ajudar.</p>

<h2 id="monolitos-vs-micro-servi√ßos">Monolitos vs Micro servi√ßos</h2>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/800/0*_73VNYOeSqDk_y84.png" />
</div>

<p>Arquitetura monolito vs micro servi√ßos
De um lado da moeda temos a arquitetura monol√≠tica, normalmente s√£o grandes e complexas e todos os m√≥dulos do seu software ficam na mesma aplica√ß√£o. N√£o necessariamente se utiliza uma √∫nica base de dados, mas n√£o se assuste se assim encontrar. Com essa arquitetura temos que os monolitos s√£o:</p>

<ul>
  <li>Simples de desenvolver;</li>
  <li>Simples de testar;</li>
  <li>Simples de implementar;</li>
  <li>Alguns casos s√£o complexos e dif√≠ceis de escalar;</li>
  <li>E a parte mais dif√≠cil, eles crescem e podem resultar em caos.</li>
</ul>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/800/0*WQ_tX2yue3_kCDSf.jpg" />
	<i>Monolito tende a causar problemas</i>
</div>

<p>Do outro lado da moeda temos os micro servi√ßos, que consistem em m√≥dulos isolados, cada um rodando na linguagem core do time que o mant√©m ou at√© a linguagem que ir√° resolver o problema de uma maneira melhor, utilizando base de dados dedicadas e distribu√≠das. Com essa arquitetura temos muitos benefic√≠os, por√©m o custo costuma ser maior. Vamos aos benef√≠cios:</p>

<ul>
  <li>M√≥dulos desacoplados;</li>
  <li>Deploys mais r√°pidos e independentes;</li>
  <li>Diferentes linguagens e tipos de base de dados;</li>
  <li>S√≥ que, mais complexidade (nem tudo s√£o flores).</li>
  <li>T√°, por que voc√™ falou tudo isso? Simples pequeno gafanhoto, para ficarmos na mesma p√°gina.</li>
</ul>

<h2 id="e-o-faas">E o FaaS?</h2>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/800/1*rUJvbf0srpg_WisZv24d6A.png" />
</div>

<p>Aqui entram os cont√™ineres ef√™meros que falamos anteriormente. Gostamos muito do gr√°fico acima, onde √© mostrado a evolu√ß√£o do serverless e onde encaixa-se a arquitetura FaaS (Fun√ß√£o como servi√ßo). Entendemos que com as functions, os servi√ßos devem possuir suas responsabilidades isoladas e voc√™ n√£o precisar√° se preocupar com a escalabilidade dessas execu√ß√µes. O provedor ir√° escalar at√© o infinito (na verdade, at√© o limite do seu cart√£o de cr√©dito). Esta arquitetura tamb√©m possui alguns benef√≠cios:</p>

<ul>
  <li>Servidores totalmente abstratos;</li>
  <li>Responsabilidade desacopladas;</li>
  <li>Auto escalonamento;</li>
  <li>Pode ser orientada a eventos;</li>
  <li>Possui um aumento de complexidade, onde muitas vezes √© necess√°rio uma mudan√ßa completa de mindset;</li>
  <li>E o melhor: s√≥ paga pelo que utilizar, j√° que seu sistema ‚Äúhiberna‚Äù quando n√£o utilizado.</li>
</ul>

<p>A cereja do bolo desta arquitetura √© sem d√∫vidas o custo. No caso da AWS Lambda, a cobran√ßa √© gerada pela quantidade de invoca√ß√µes e pelos Gigabytes de mem√≥ria alocados por segundo de utiliza√ß√£o. Em um pr√≥ximo artigo, entrarei em detalhe sobre <strong>como ter previsibilidade de custos</strong>.</p>

<h2 id="sobre-a-reviewr">Sobre a Reviewr</h2>

<p>Para melhor compreens√£o, √© importante voc√™ ter conhecimento sobre o que fazemos aqui na reviewr. <a href="http://reviewr.me/site/">Aqui voc√™ encontra mais informa√ß√µes</a>.</p>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/800/1*0ZrpBnNqEIPSlI6ZIsKBHw.png" />
</div>

<p>Alguns canais que recebem avalia√ß√µes online (reviews)
A grosso modo: A reviewr faz gest√£o da reputa√ß√£o online de grandes marcas e seus estabelecimentos, atrav√©s de um meio muito interessante: os famosos reviews. Com esses dados coletados e processados, centralizamos tudo em uma √∫nica plataforma, disponibilizando um sistema de gest√£o e publica√ß√£o de respostas, indicadores e intelig√™ncia para os estabelecimentos.</p>

<p>O que nos levou a utilizar a arquitetura FaaS, foi a necessidade de diminuirmos o n√∫mero de horas/dia de m√°quina e ainda assim, para que nosso sistema ficasse dispon√≠vel a qualquer instante.</p>

<h2 id="7-li√ß√µes-aprendidas">7 Li√ß√µes Aprendidas</h2>

<p>Vamos para a parte mais esperada (ou n√£o). Trazemos as sete principais li√ß√µes aprendidas nessa fase de reescrita e migra√ß√£o.</p>

<h3 id="previsibilidade-de-custos">Previsibilidade de Custos</h3>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/800/1*1VAl9J4Vo2x-wP4kyHcA5A.png" />
</div>

<p>Como calcular o custo de uma AWS Lambda em produ√ß√£o
Com os recursos de FaaS, √© poss√≠vel prever quanto custar√° aproximadamente uma Lambda em produ√ß√£o. Voc√™ s√≥ precisa de 2 informa√ß√µes: quantidade de invoca√ß√µes e m√©dia do tempo de dura√ß√£o das execu√ß√µes (para calcular quanto tempo voc√™ alocar√° de mem√≥ria em gigabytes).</p>

<p>Vale ressaltar o <strong>free-tier</strong> que a Amazon disponibiliza para todos os seus clientes, no caso das Lambdas: 1 milh√£o de invoca√ß√µes e 400k Gb/s (cr√©ditos mensais).</p>

<h3 id="disrup√ß√£o-da-mentalidade">Disrup√ß√£o da Mentalidade</h3>

<p>√â necess√°rio mudar o pensamento quando se pensa de maneira mais granular. Neste contexto, n√≥s pensamos em quebrar o m√°ximo poss√≠vel nossa arquitetura em responsabilidades e deixar de uma maneira simples, para que at√© um beb√™ consiga dar manuten√ß√£o, reaproveitar c√≥digo e subir uma nova fun√ß√£o em produ√ß√£o em menos de tr√™s minutos (√© o tempo de ferver a √°gua do miojo).</p>

<h3 id="versionamento-e-ci">Versionamento e CI</h3>

<p>Sem isso, trabalhar com fun√ß√µes ser√° algo t√£o complexo que n√£o far√° sentido. Imagine s√≥ aquele mundo de fun√ß√µes com deploy manual, sem versionamento/documenta√ß√£o. Ou at√© mesmo aqueles reposit√≥rios enormes, cheios de fun√ß√µes, que pra fazer deploy de uma tem que fazer deploy de todas (meu Deus n√©?).</p>

<p>Aqui na reviewr, nossas fun√ß√µes s√£o em <strong>NodeJS</strong> e <strong>Golang</strong>. Para todas, temos deploy automatizado com o CircleCI (fez merge do PR, est√° em prod meu amigo). Para o versionamento, utilizamos o semantic-release para os projetos em NodeJS e fazemos versionamento manual das functions em Golang (caso conhe√ßa algo, indique nos coment√°rios). Como fica isso?</p>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/800/0*xPQHttxaAG3DNoWt" />
	<i>Functions em NodeJS com pacotes NPM privados</i>
</div>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/800/0*_bOZ6BtNjsVRjbcR" />
	<i>Builds e deploys com CircleCI</i>
</div>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/800/0*gNpnFZ6egTkssZ6M" />
	<i>Semantic-release rodando lindo</i>
</div>

<h3 id="monitoramento-e-alerta">Monitoramento e Alerta</h3>

<p>N√£o poder√≠amos deixar de falar destes assuntos, n√£o √© mesmo? Aqui na reviewr, encontramos uma startup da Est√≥nia que lan√ßou o <a href="http://dashbird.io/">Dashbird</a>. O sistema deles integra com o seu <strong>AWS Cloud Watch</strong> e coleta todos os dados, m√©tricas e indicadores. Ainda auxilia nos alertas, confira abaixo:</p>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/1000/1*YH6X2_AA33om-yIQb2SQtA.png" />
	<i>Dashboard do Dashbird (√©, usamos bastante FaaS por aqui)</i>
</div>

<p>E al√©m de voc√™ ter os seus alertas, voc√™ precisa confiar neles:</p>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/800/1*TrTaHWnIhRXy5Ro8ucG87A.png" />
	<i>Slack alerts</i>
</div>

<h3 id="servi√ßos-secund√°rios">Servi√ßos Secund√°rios</h3>

<p>Este √© um item que sofremos demais aqui ao migrar para a nova arquitetura. No primeiro dia, resolvemos fazer um teste de carga integrando todos os nossos estabelecimentos monitorados e foi catastr√≥fico. Nossos bancos de dados ca√≠ram.</p>

<p>Voc√™ precisa muito tomar cuidado com os servi√ßos ao redor da sua arquitetura. O provedor realmente ir√° executar suas fun√ß√µes de maneira paralela e voc√™ pode derrubar algu√©m nessa brincadeira (digamos que √© um ataque contra si mesmo).</p>

<p>Aqui tivemos que utilizar o Kineses Firehose pra resolver o problema do Redshift (aqui chamamos o nosso cluster de Jarvis) e para o MongoDB, fizemos um cluster com <strong>ReplicaSet</strong>. Hoje lidamos com um master e seis slaves. Tamb√©m tivemos que utilizar o projeto open-source <a href="https://restheart.org/">Restheart</a> na frente do nosso cluster. Al√©m dele isolar o driver para voc√™, possui um <strong>cache-in-memory</strong> absurdo e gerencia o pool de conex√µes com o Mongo (pode usar para PostgreSQL tamb√©m). A nossa dica √©: cautela meu amigo.</p>

<h3 id="aws-step-function">AWS Step Function</h3>

<p>Este √© mais para conhecimento, no decorrer dos nossos estudos, conhecemos este recurso da AWS (eles quase n√£o tem recursos escondidos). O Step-function resolve o problema de gerenciamento e orquestra√ß√£o das functions. Ele √© uma esp√©cie de workflow que funciona como um middleware para voc√™ gerenciar as lambdas, que juntas, executam um fluxo espec√≠fico.</p>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/800/0*9eASZU5hFyDkyBPn" />
</div>

<p>Voc√™ literalmente desenha (atrav√©s de um JSON) o seu fluxo e o que ele dever√° fazer, desde chamar uma lambda at√© validar um output de um evento.</p>

<p>Pode utilizar para fluxos pequenos e at√© para fluxos grandes/complexos.</p>

<p>Vale salientar algo: cuidado! O Step-function faz a cobran√ßa por mudan√ßa de estado, tendo um custo de 0,0250 USD a cada 1k transi√ß√µes de estado (valores referentes a regi√£o da North Virg√≠nia).</p>

<h3 id="cold-start">Cold Start</h3>

<p>√â um estado que a fun√ß√£o passa quando √© iniciada pela primeira vez. O provedor provisiona um container para executa-la (como se aquecesse a fun√ß√£o) e nas pr√≥ximas chamadas (dentro de um per√≠odo de tempo pr√≥ximo) ele utiliza a que foi previamente aquecida. No nosso caso, chamamos a mesma fun√ß√£o N vezes de maneira paralela, ou seja, todas ficam com o estado <strong>cold-start</strong> e isso impacta na dura√ß√£o da execu√ß√£o. E faz acontecer isso:</p>

<div style="text-align:center">
	<img class="image" src="https://cdn-images-1.medium.com/max/1000/0*ebBghue8pb-Hx88x" />
	<i>Lambdas em cold-start com durations consideravelmente altas</i>
</div>

<p>Resolvemos de maneira parcial, configurando um cloud watch para ficar ‚Äúconversando com as lambdas‚Äù. A cada 1min ele dispara um evento de PING para elas, onde validamos e respondemos um PONG \o/.</p>

<h2 id="conclus√£o">Conclus√£o</h2>

<p>A conclus√£o √© que para usar fun√ß√µes no seu sistema depende muito do cen√°rio da sua aplica√ß√£o/arquitetura. De maneira geral, as lambdas podem resolver muitos problemas se forem bem utilizadas. √â necess√°rio um pensamento agu√ßado, simplista e disruptivo parar utilizar tudo o que elas podem oferecer.</p>

<p>Se voc√™ tiver d√∫vidas ou precisar de alguma coisa, pode me contactar pelo e-mail <strong>leonardo.rifeli@reviewr.me</strong> ou o Marcelo <strong>marcelo.andrade@reviewr.me</strong>.</p>

<p>Compartilhe as suas experi√™ncias com Serverless e FaaS nos coment√°rios!</p>
:ET