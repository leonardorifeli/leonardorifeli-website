I"‰-<p>Em programa√ß√£o de software a sigla <strong>SOLID</strong> tem ganhado cada vez mais import√¢ncia. Trata-se de um acr√¥nimo popularizado por <strong>Robert C. Martin</strong> (o Uncle Bob), onde cada letra representa um dos cinco princ√≠pios do OOD (object-oriented design) que, quando aplicados em conjunto ou isoladamente, possibilitam a cria√ß√£o de c√≥digos com facilidade de manter e de se estender ao longo do tempo.</p>

<p>Esse √© o primeiro post de uma s√©rie onde abordaremos todos os cinco princ√≠pios do <strong>SOLID</strong>. O primeiro √© sobre ‚ÄúSingle responsibility principle‚Äù, abreviado por <strong>SRP</strong>, e significa literalmente ‚ÄúPrinc√≠pio da Responsabilidade √önica‚Äù.</p>

<p>Para come√ßar: falar de SOLID √© falar de programa√ß√£o orientada a objetos e design (OOD). Tendo isso em mente, o Princ√≠pio de Responsabilidade √∫nica traz uma perspectiva diferente para a orienta√ß√£o a objeto: a <strong>coes√£o</strong>.</p>

<h1 id="t√°-e-o-que-√©-coes√£o">T√°, e o que √© coes√£o?</h1>

<p>Segundo o dicion√°rio online <a href="https://www.dicio.com.br/coesao/">Dicio</a>:</p>

<blockquote>
  <ul>
    <li>Cujas partes est√£o ligadas harmonicamente entre si: coes√£o do governo.
Uni√£o; harmonia; associa√ß√£o √≠ntima: a coes√£o das partes de um Estado.</li>
    <li>Uso correto dos aspectos gramaticais que conectam os elementos de um texto, tornando-o claro e compreens√≠vel.</li>
    <li>[Figurado] Coer√™ncia de pensamento; fundamento que d√° sentido a uma obra.
Ader√™ncia; for√ßa que une as mol√©culas e/ou √°tomos √†s partes constituintes de um corpo, fazendo com que eles n√£o se partam.
(Etm. do franc√™s: coh√©sion)</li>
  </ul>
</blockquote>

<p>Fonte: <a href="https://www.dicio.com.br/coesao/">dicio.com.br/coesao</a>.</p>

<p>E no mundo do desenvolvimento de software, o que √© coes√£o?</p>

<p>Algo que fa√ßa sentido para algu√©m. E este algu√©m, √© quem ir√° consumir uma determinada classe e seus m√©todos. Cada participante deve ter somente um prop√≥sito para existir. Ou seja, coes√£o √© consequ√™ncia de ter-se um bom design e n√£o violar SRP.</p>

<p>E as vantagens de se ter alta coes√£o (ou ‚Äúcoes√£o forte‚Äù)?</p>

<p>Redu√ß√£o da complexidade das classes e m√©todos (eles ficam mais simples, com menos opera√ß√µes).</p>

<h1 id="defini√ß√£o-de-responsabilidade">Defini√ß√£o de responsabilidade</h1>

<p>Segundo o dicion√°rio online <a href="https://www.dicio.com.br/responsabilidade/">Dicio</a>:</p>

<blockquote>
  <ul>
    <li>Obriga√ß√£o; dever de arcar, de se responsabilizar pelo pr√≥prio comportamento ou pelas a√ß√µes de outra(s) pessoa(s).</li>
    <li>[Por Extens√£o] Sensatez; compet√™ncia para se comportar de maneira sensata.</li>
    <li>Natureza ou condi√ß√£o de respons√°vel; capacidade de responder por seus pr√≥prios atos; qualidade de quem presta contas as autoridades.</li>
    <li>[Jur√≠dico] Obriga√ß√£o jur√≠dica que resulta do desrespeito de algum direito, atrav√©s de uma a√ß√£o contr√°ria ao ordenamento jur√≠dico.</li>
  </ul>
</blockquote>

<p>Fonte: <a href="https://www.dicio.com.br/responsabilidade/">dicio.com.br/responsabilidade</a>.</p>

<p>E no contexto de um c√≥digo?</p>

<p><strong>Robert C. Martin</strong>, em seu livro (Agile Software Development, Principles, Patterns, and Practices), define responsabilidade como: <strong>uma classe deve ter apenas uma raz√£o para ser alterada</strong>.</p>

<h1 id="problemas-da-viola√ß√£o-do-srp">Problemas da viola√ß√£o do SRP</h1>

<p>Se uma classe possui mais que uma raz√£o para ser alterada, entende-se que ela possui mais que uma responsabilidade, tornando-a desconexa (n√£o coesa).</p>

<h4 id="quais-problemas-uma-classe-desconexa-poder√°-causar-para-a-aplica√ß√£o">Quais problemas uma classe desconexa poder√° causar para a aplica√ß√£o?</h4>

<ul>
  <li>Dificuldade no reuso de suas responsabilidades;</li>
  <li>Dificuldades na manuten√ß√£o (dificuldade em manter e/ou evoluir por conta do excesso de responsabilidades);</li>
  <li>Aumento na rigidez e fragilidade: quando alterar uma responsabilidade, outra pode ser comprometida;</li>
  <li>Alto acoplamento da classe.</li>
</ul>

<h1 id="exemplos">Exemplos</h1>

<p>Os c√≥digos dos exemplos ser√£o exibidos somente com as assinaturas, para refor√ßar a id√©ia que <strong>Uncle Bob</strong> traz, de que a implementa√ß√£o dos m√©todos √© irrelevante para a an√°lise. Somente com as assinaturas, conseguimos perceber se existe (ou n√£o) a viola√ß√£o do princ√≠pio.</p>

<h4 id="exemplo-1">Exemplo 1</h4>

<p>Considere o arquivo abaixo, onde temos a classe <strong><code class="highlighter-rouge">PopulationStandardDeviation</code></strong> e a sua responsabilidade √© calcular o desvio padr√£o populacional.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leonardorifeli</span><span class="o">.</span><span class="na">article</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PopulationStandardDeviation</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">mean</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">calculate</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">deviationSumSquare</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Perceba que, o nome da classe diz exatamente qual √© a sua responsabilidade, calcular o desvio padr√£o populacional.</p>

<p>Com o exemplo acima, podemos ver rapidamente a viola√ß√£o do princ√≠pio, onde ela exp√µem o m√©todo <strong><code class="highlighter-rouge">mean()</code></strong> e quem implementa esta classe n√£o espera que ela fa√ßa c√°lculo da m√©dia. Apesar da m√©dia fazer parte do algoritmo para calcular o <strong>desvio padr√£o populacional</strong>, ela n√£o faz parte da responsabilidade da classe, logo, a exposi√ß√£o do m√©todo <strong><code class="highlighter-rouge">mean()</code></strong> mesmo fazendo parte do algoritmo, viola o princ√≠pio. O m√©todo <strong><code class="highlighter-rouge">mean()</code></strong> n√£o deveria ser exposto. Mesmo problema com o m√©todo <strong><code class="highlighter-rouge">deviationSumSquare()</code></strong>.</p>

<p>Neste caso, para que n√£o haja a viola√ß√£o do SRP, deve-se deixar ambos os m√©todos (<strong><code class="highlighter-rouge">mean()</code></strong> e <strong><code class="highlighter-rouge">deviationSumSquare()</code></strong>) como <strong><code class="highlighter-rouge">private</code></strong> ou isolar eles em outras classes, injetando-as como depend√™ncia na <strong><code class="highlighter-rouge">PopulationStandardDeviation</code></strong>.</p>

<h4 id="exemplo-2">Exemplo 2</h4>

<p>Neste segundo exemplo, considere o arquivo abaixo, onde temos a classe <strong><code class="highlighter-rouge">Report</code></strong> e a sua responsabilidade √© gerar relat√≥rio.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leonardorifeli</span><span class="o">.</span><span class="na">article</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Report</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">find</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">proccess</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>O nome da classe tamb√©m diz exatamente qual a sua responsabilidade, gerar relat√≥rio.</p>

<p>Na vis√£o do usu√°rio, gerar relat√≥rio √© apenas fazer com que os dados sejam exibidos em tela (ou impressos), de modo organizado. No n√≠vel de desenvolvimento de software, gerar relat√≥rio engloba v√°rios fatores, sendo eles: buscar os dados, process√°-los, organiz√°-los e exibi-los em tela (ou impressos).</p>

<p>Perceba que para gerar  um relat√≥rio s√£o envolvidas v√°rias responsabilidades. A classe <strong><code class="highlighter-rouge">Report</code></strong>, por exemplo, possui v√°rias raz√µes para ser alterada: como mudar o m√©todo <strong><code class="highlighter-rouge">find()</code></strong> para buscar os dados em outro lugar, mudar o m√©todo <strong><code class="highlighter-rouge">proccess()</code></strong> para alterar uma regra de dom√≠nio e at√© mesmo alterar o m√©todo <strong><code class="highlighter-rouge">print()</code></strong>.</p>

<h5 id="como-poder√≠amos-melhorar-essa-classe">Como poder√≠amos melhorar essa classe?</h5>

<p>Inicialmente, precisar√≠amos isolar o m√©todo <strong><code class="highlighter-rouge">find()</code></strong> em um contexto de reposit√≥rio (outra classe que fa√ßa somente a busca dos dados no banco). Depois, poder√≠amos isolar o m√©todo <strong><code class="highlighter-rouge">proccess()</code></strong> noutra classe e que teria apenas uma responsabilidade, processar os dados que vieram do banco de dados e trat√°-los de acordo com o dom√≠nio em quest√£o. Finalmente, deixaremos a classe <strong><code class="highlighter-rouge">Report</code></strong> com a inje√ß√£o das suas depend√™ncias, tendo somente o m√©todo <strong><code class="highlighter-rouge">generate()</code></strong>.</p>

<h1 id="refer√™ncias">Refer√™ncias</h1>

<ul>
  <li><a href="https://www.amazon.com/dp/0135974445/">Livro - Agile Software Development, Principles, Patterns, and Practices</a>;</li>
  <li><a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)">Article Cohesion - Computer Science</a>;</li>
  <li><a href="http://www.hanselminutes.com/145/solid-principles-with-uncle-bob-robert-c-martin">SOLID Principles with Uncle Bob - Robert C. Martin</a>;</li>
  <li><a href="https://www.youtube.com/watch?v=dzawoPISdHc">Robert C Martin The Single Responsibility Principle</a>.</li>
</ul>

<h1 id="conclus√£o">Conclus√£o</h1>

<p>O SRP √© um dos princ√≠pios mais importantes da orienta√ß√£o a objetos. Atentando-se a ele, seus c√≥digos ficar√£o mais coesos, simples e manuten√≠veis. √â um princ√≠pio bem extenso e os exemplos tendem ao infinito.</p>

<p>Podemos continuar as discuss√µes sobre este princ√≠pio nos coment√°rios?</p>

<p>Compartilhe conosco seus aprendizados.</p>

<h1 id="agradecimentos">Agradecimentos</h1>

<p>A ContaAzul, por proporcionar o espa√ßo e me dar a oportunidade de compartilhar meu conhecimento.
Ao <strong>Leonardo Camacho</strong>, pelo aux√≠lio nas corre√ß√µes e incentivo para escrever.
Para Carlos Becker, Lucas Merencia, Marcos Ferreira, Marcelo Ed. Junior e Jeferson Kersten pelo incentivo e aux√≠lio dos assuntos aqui descritos.</p>

<p>Post originalmente postado em: <a href="https://engineering.contaazul.com/princ%C3%ADpios-solid-srp-e-sopa-de-letrinhas-d569fd0f80d9">engineering.contaazul.com</a></p>
:ET